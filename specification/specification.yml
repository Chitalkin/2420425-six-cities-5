openapi: "3.0.2"
info:
  title: API сервер для сервиса аренды жилья «Шесть городов»
  description: |-
    * Список ресурсов и маршрутов сервера «Шесть городов».
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: "1.0.0"

tags:
  - name: amenities
    description: Действия с типами удобств.
  - name: comments
    description: Действия с комментариями.
  - name: cities
    description: Действия с городами.
  - name: offers
    description: Действия с объявлениями.
  - name: users
    description: Действия с пользователем.

paths:
  /users/register:
    post:
      tags:
        - users
      summary: Регистрация пользователя
      description: Регистрирует нового пользователя.

      requestBody:
        description: Информация для создания нового пользователя.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createUser"
        required: true

      responses:
        "201":
          description: Пользователь зарегистрирован. Объект пользователя.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"

        "409":
          description: Пользователь с таким email уже существует.

  /users/login:
    post:
      tags:
        - users
      summary: Авторизация пользователя
      description: Авторизует пользователя на основе логина и пароля
      requestBody:
        description: Информация для авторизации пользователя.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/loginUser"
        required: true

      responses:
        "200":
          description: Пользователь авторизован.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/loggedUser"

        "401":
          description: Неправильный логин или пароль пользователя.

    get:
      tags:
        - users
      summary: Проверка состояния пользователя
      description: Возвращает информацию по авторизованному пользователю
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/checkUser"

  /users/{userId}/avatar:
    post:
      tags:
        - users
      summary: Загрузить изображение аватара
      description: Загружает изображение аватара пользователя. Изображение
        аватара должно быть в формате `png` или `jpg`.

      requestBody:
        description: Изображение для аватара.
        content:
          "image/jpeg":
            schema:
              type: string
              format: binary
          "image/png":
            schema:
              type: string
              format: binary

      responses:
        "200":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/avatar"

  /comments:
    post:
      tags:
        - comments
      summary: Создание нового комментария
      description: Добавляет новый комментарий
      requestBody:
        description: Информация для создания нового пользователя.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createComment"
        required: true

      responses:
        "201":
          description: Комментарий был создан. Объект комментария.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/comment"

  /cities:
    get:
      tags:
        - cities
      summary: Получение списка городов
      description: Возвращает список всех доступных городов
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/city"

        "404":
          description: Not found response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorMessage"

  /offers:
    post:
      tags:
        - offers
      summary: Создание нового предложения
      description: Добавляет в коллекцию новое предложение об аренде
      requestBody:
        description: Информация для создания нового предложения.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createOffer"

      responses:
        "201":
          description: Предложение было создано. Объект предложения.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/offer"

    get:
      tags:
        - offers
      summary: Получение всех предложений об аренде
      description: Возвращает список предложений

      responses:
        "200":
          description: Массив предложений.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/offer"

  /offers/{offerId}:
    get:
      tags:
        - offers
      summary: Получение предложения по id
      description: возвращает информацию о предложении

      responses:
        "200":
          description: Информация о предложении.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/offer"

    patch:
      tags:
        - offers
      summary: Обновление предложения об аренде
      description: Обновляет информацию о переданном предложении

      requestBody:
        description: Данные для обновления комментария.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/offer"

      responses:
        "201":
          description: Предложение было обновлено. Объект обновленного предложения.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/offer"

    delete:
      tags:
        - offers
      summary: Удаление предложения
      description: Удаляет переданное предложение об аренде
      responses:
        "204":
          description: No Content

  /offers/{offerId}/comments:
    get:
      tags:
        - offers
      summary: Список комментариев к объявлению
      description: Возвращает список комментариев к объявлению

      responses:
        "200":
          description: список комментариев
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/comment"

  /offers/user/favorites:
    get:
      tags:
        - offers
      summary: Список избранных предложений
      description: Возвращает список избранных предложений

      responses:
        "200":
          description: список предложений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/offer"

  /cities/{cityId}/offers:
    get:
      tags:
        - cities
      summary: Получение отфильтрованных предложений
      description: Возвращает список предложений для конкретного города
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/offer"

  /amenities/{amenityId}/offers:
    get:
      tags:
        - amenities
      summary: Получение отфильтрованных предложений
      description: Возвращает список предложений с конкретными удобствами
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/offer"

  /amenities:
    get:
      tags:
        - amenities
      summary: Получение типов удобств
      description: Возвращает список всех типов удобств
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/amenity"

        "404":
          description: Not found response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorMessage"

components:
  schemas:
    createUser:
      type: object

      properties:
        email:
          type: string
          example: ivan@gmail.com

        name:
          type: string
          example: Ivan

        avatarPath:
          type: string
          example: avatar.png

        password:
          type: string
          example: 123456

    loginUser:
      type: object

      properties:
        email:
          type: string
          example: ivan@gmail.com

        password:
          type: string
          example: 123456

    loggedUser:

      allOf:
        - type: object
          properties:
            token:
              type: string
              example: eyJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6Im1lZ2F0b21hdG9zQGdtYWlsLmNvbSIsIm5hbWUiOiJUb21hdG8iLCJpZCI6IjY1NTEwYjU3NzUwYzc0YTE0YTM1ODJhNiIsImlhdCI6MTY5OTgyNDE2OCwiZXhwIjoxNjk5OTk2OTY4fQ.wsFGzxw1rynXUdHD2XFf3wWyKNlPc7dsjfCtKUzYGDM
        - $ref: "#/components/schemas/user"

    checkUser:
      type: object

      properties:
        email:
          type: string
          example: ivan@gmail.com

    user:
      type: object

      properties:
        name:
          type: string
          example: Ivan

        email:
          type: string
          example: ivan@gmail.com

        avatarPath:
          type: string
          example: "avatar.png"

    city:
      type: object

      properties:
        id:
          type: string
          example: 6550ed7db585005ec7ff4640

        name:
          type: string
          example: Amsterdam

        latitude:
          type: string
          example: 52.370216

        longitude:
          type: string
          example: 4.895168

    amenity:
      type: object

      properties:
        id:
          type: string
          example: 123qwerty4567890

        name:
          type: string
          example: Air conditioning

    errorMessage:
      type: object

      properties:
        error:
          type: string
          example: Текст ошибки

    avatar:
      type: object

      properties:
        filepath:
          type: string
          example: /six-cities/upload/WnGYvbdT7vE8twJIo4NbD.png

    createComment:
      type: object

      properties:
        text:
          type: string
          example: Примерный текст комментария

        offerId:
          type: string
          example: 6550effb07d20073cd38de00

    comment:
      type: object

      properties:
        id:
          type: string
          example: 65514405cf94716d5bfe2f23
        text:
          type: string
          example: Текст комментария
        postDate::
          type: string
          format: date-time
          example: 2023-03-20T09:12:28Z
        user:
          $ref: "#/components/schemas/user"

    preview:
      type: string
      example: path/to/preview

    photo:
      type: string
      example: path/to/photo

    createOffer:
      type: object

      properties:
        title:
          type: string
          example: Сдам апартаменты в центре города.

        description:
          type: string
          example: Без посредников и комиссий. Квартира находится в центре города, рядом с остановками общественного транспорта

        postDate:
          type: string
          format: date-time
          example: 2023-03-20T09:12:28Z

        city:
          $ref: "#/components/schemas/city"

        preview:
          $ref: "#/components/schemas/preview"

        photos:
          type: array
          items:
            $ref: "#/components/schemas/photo"

        premium:
          type: boolean
          example: false

        favorite:
          type: boolean
          example: true

        rate:
          type: integer
          example: 3

        type:
          type: string
          example: room

        rooms:
          type: integer
          example: 3

        guests:
          type: integer
          example: 2

        price:
          type: integer
          example: 4000

        amenities:
          type: array
          items:
            $ref: "#/components/schemas/amenity"
        user:
          $ref: "#/components/schemas/user"

        commentsCount:
          type: integer
          example: 2

    offer:
      allOf:
        - type: object
          properties:
            id:
              type: string
              example: 123qwerty4567890
        - $ref: "#/components/schemas/createOffer"
